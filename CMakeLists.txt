cmake_minimum_required(VERSION 3.26)
project(codeforces)

set(CMAKE_CXX_STANDARD 17)

add_executable(codeforces
#        auca/competitive_programming_I/experienced/carrots_for_rabbits.cpp
#        auca/competitive_programming_I/math_ad_hoc/kolya_and_tanya.cpp
#        auca/competitive_programming_I/math_ad_hoc/solo_mid_oracle.cpp
#        auca/competitive_programming_I/math_ad_hoc/forbidden_integer.cpp
#        auca/competitive_programming_I/experienced/nice_matrix.cpp
#        auca/competitive_programming_I/math_ad_hoc/kolya_and_tanya.cpp
#        auca/competitive_programming_I/math_ad_hoc/moderate_modular_mode.cpp
#        leetcode/codeforces_alternative/math_ad_hoc/kolya_and_tanya/divide_two_integers.cpp
#        leetcode/codeforces_alternative/math_ad_hoc/kolya_and_tanya/pow_x_n.cpp
#        leetcode/codeforces_alternative/math_ad_hoc/kolya_and_tanya/power_of_three.cpp
#        leetcode/codeforces_alternative/math_ad_hoc/kolya_and_tanya/sum_of_two_integers.cpp
#        leetcode/all_topics/two_pointers/intersection_of_two_arrays_II.cpp
#        codeforces/contests/beta_round_1/theatre_square.cpp
#        codeforces/contests/other.cpp
#        codeforces/contests/div_4/round_971/minimize!.cpp
#        codeforces/contests/div_4/round_971/osu!mania.cpp
#        codeforces/contests/div_4/round_784/triple.cpp
#        codeforces/contests/div_4/round_784/odd_even_increments.cpp
#        ICPC/qualification_round_kg_2023_2024/много_ракушек.cpp
#        ICPC/qualification_round_kg_2023_2024/дорога.cpp
#        ICPC/qualification_round_kg_2023_2024/старый_шифр.cpp
#        ICPC/topics/sliding_window/leetcode/maximum_sum_of_distinct_subarrays_with_length_k.cpp
#        ICPC/topics/sliding_window/leetcode/maximum_points_you_can_obtain_from_cards.cpp
#        ICPC/topics/merging_intervals/merge_intervals.cpp
#        ICPC/qualification_round_kg_2023_2024/чего-то_не_хватает.cpp
#        ICPC/topics/leetcode/two_pointer/remove_duplicates_from_sorted_array.cpp
#        ICPC/topics/leetcode/binary_search/search_in_rotated_sorted_array.cpp
#        ICPC/topics/leetcode/greedy/jump_game.cpp
#        ICPC/topics/leetcode/dynamic_programming/climbing_stairs.cpp
#        ICPC/qualification_round_kg_2023_2024/вместе_навсегда.cpp
#        ICPC/topics/leetcode/dynamic_programming/fibonacci.cpp
#        ICPC/krsu/длина_числа.cpp
#        ICPC/qualification_round_kg_2023_2024/налоговый_вопрос.cpp
#        ICPC/qualification_round_kg_2023_2024/старый_шифр.cpp
#        auca/algorithm_languages_I/two_pointers/segment_with_small_sum.cpp
#        auca/algorithm_languages_I/two_pointers/segment_with_big_sum.cpp
#        auca/algorithm_languages_I/two_pointers/number_of_segments_with_small_sum.cpp
#        ICPC/qualification_round_kg_2023_2024/веселые_фонари.cpp
#        ICPC/qualification_round_kg_2023_2024/старый_шифр.cpp
#        ICPC/qualification_round_kg_2023_2024/чего-то_не_хватает.cpp
#        ICPC/qualification_round_kg_2023_2024/есть_ли_сдача.cpp
#        ICPC/qualification_round_kg_2023_2024/выигрыш.cpp
        ICPC/qualification_round_kg_2023_2024/веселые_фонари.cpp
        #        ICPC/topics/leetcode/two_pointer/two_sum_II.cpp
        #        auca/competitive_programming_I/experienced/nice_matrix.cpp
#        auca/competitive_programming_I/experienced/burning_midnight_oil.cpp
#        auca/competitive_programming_I/experienced/glass_carving.cpp
        #        auca/competitive_programming_I/beginner/next_round.cpp
#        auca/competitive_programming_I/beginner/chess.cpp
#        auca/algorithm_languages_I/prefixes_and_suffixes/ladder.cpp
#        leetcode/leetcode75/array_string/1768.cpp
#        leetcode/leetcode75/array_string/1071.cpp
#        leetcode/leetcode75/array_string/1431.cpp
#        auca/algorithm_languages_I/events_and_scanline/the_union_of_k_segments.cpp
#        auca/algorithm_languages_I/exchange_argument/the_smallest_string_concatenation.cpp
#        auca/algorithm_languages_I/exchange_argument/the_dragon_land.cpp
#        auca/algorithm_languages_I/exchange_argument/no_time_for_dragons.cpp
#        auca/algorithm_languages_I/events_and_scanline/segments.cpp
#        auca/algorithm_languages_I/exchange_argument/the_dragon_land.cpp
#        leetcode/leetcode75/sliding_window/643.cpp
#        leetcode/leetcode75/sliding_window/1456.cpp
#        leetcode/leetcode75/sliding_window/1004.cpp
#        leetcode/leetcode75/sliding_window/1493.cpp
#        leetcode/leetcode75/prefix_sum/724.cpp
#        leetcode/leetcode75/prefix_sum/1732.cpp
#        leetcode/leetcode75/array_string/1431.cpp
#        leetcode/leetcode75/array_string/605.cpp
#        leetcode/leetcode75/array_string/345.cpp
#        leetcode/leetcode75/two_pointers/283.cpp
#        leetcode/leetcode75/two_pointers/392.cpp
#        leetcode/leetcode75/bit_manipulation/136.cpp
#        leetcode/leetcode75/hash_map_set/2215.cpp
#        leetcode/leetcode75/hash_map_set/1207.cpp
#        leetcode/leetcode75/prefix_sum/1732.cpp
#        leetcode/leetcode75/prefix_sum/724.cpp
#        leetcode/basic_topics/strings/344.cpp
#        leetcode/basic_topics/strings/125.cpp
#        leetcode/basic_topics/strings/3.cpp
#        leetcode/basic_topics/strings/424.cpp
#        leetcode/basic_topics/strings/49.cpp
#        leetcode/basic_topics/arrays/238.cpp
#        leetcode/basic_topics/linked_lists/206.cpp
#        codeforces/itmo_academy_pilot_course/two_pointers_method/2.cpp
#        codeforces/itmo_academy_pilot_course/two_pointers_method/step1/theory/1.cpp
#        codeforces/itmo_academy_pilot_course/two_pointers_method/step1/practice/A.cpp
#        codeforces/itmo_academy_pilot_course/two_pointers_method/step1/practice/B.cpp
#        codeforces/itmo_academy_pilot_course/two_pointers_method/step1/practice/C.cpp
#        auca/competitive_programming_I/math_ad_hoc/plate_game.cpp
#        auca/competitive_programming_I/math_ad_hoc/longest_divisors_interval.cpp
#        codeforces/100_easy_problems/strings_arrays/reverse_an_array.cpp
#        codeforces/100_easy_problems/strings_arrays/string_task.cpp
#        codeforces/100_easy_problems/strings_arrays/phone_numbers.cpp
#        codeforces/100_easy_problems/strings_arrays/cashier.cpp
#        codeforces/100_easy_problems/primes_broken/lost_rectangle.cpp
#        auca/competitive_programming_I/experienced/cd_pwd_commands.cpp
#        auca/competitive_programming_I/experienced/nice_matrix.cpp
#        auca/competitive_programming_I/experienced/four_stones.cpp
#        auca/competitive_programming_I/implementation/exponential_notation.cpp
#        auca/competitive_programming_I/implementation/exponential_notation.cpp
#        auca/data_structures/binary_trees/binary_search.cpp
#        auca/data_structures/binary_trees/balanced_binary_search_tree.cpp
#        leetcode/all_topics/binary_search/binary_search_tree_inorder_traversal.cpp
#/        auca/data_structures/static_arrays/count_the_values.cpp
#        auca/data_structures/static_arrays/positions_in_permutations.cpp
#        auca/data_structures/sets/unique_strings.cpp
#        auca/competitive_programming_I/implementation/meximum_array.cpp
#        auca/competitive_programming_I/implementation/snake_the_mathematician.cpp
#        auca/competitive_programming_I/implementation/kingdoms_and_alliances.cpp
        #        codeforces/100_easy_problems/sorting/bubble_sort.cpp
#        codeforces/100_easy_problems/sorting/selection_sort.cpp
#        codeforces/100_easy_problems/sorting/the_price_is_right.cpp
#        codeforces/100_easy_problems/math_I/little_c_loves_3_I.cpp
#        leetcode/leetcode75/stack/removing_stars_from_a_string.cpp
#        leetcode/leetcode75/array_string/reverse_vowels_of_string.cpp
#        leetcode/leetcode75/array_string/reverse_words_in_string.cpp
#        leetcode/leetcode75/array_string/product_of_array_except_self.cpp
#        leetcode/leetcode75/array_string/increasing_triplet_subsequence.cpp
#        leetcode/leetcode75/array_string/string_compression.cpp
#        leetcode/leetcode75/array_string/greatest_common_divisor_of_strings.cpp
#        leetcode/leetcode75/two_pointers/max_number_of_k_sum_pairs.cpp
#        leetcode/leetcode75/sliding_window/max_consecutive_ones_III.cpp
#        leetcode/leetcode75/sliding_window/longest_subarray_of_1s_after_deleting_one_element.cpp
#        codeforces/100_easy_problems/sorting/scores_in_order.cpp
#        leetcode/basic_topics/arrays/two_sum.cpp
#        leetcode/basic_topics/arrays/maximum_subarray.cpp
#        leetcode/basic_topics/arrays/merge_intervals.cpp
#        leetcode/basic_topics/arrays/median_of_two_sorted_arrays.cpp
#        leetcode/leetcode75/stack/valid_parentheses.cpp
#        leetcode/leetcode75/stack/sliding_window_maximum.cpp
#        codeforces/itmo_academy_pilot_course/binary_search/fast_search.cpp
#        codeforces/itmo_academy_pilot_course/binary_search/closest_to_the_left.cpp
#        codeforces/itmo_academy_pilot_course/binary_search/closest_to_the_right.cpp
#        leetcode/basic_topics/sorting_search/binary_search.cpp
#        leetcode/basic_topics/arrays/rotate_array.cpp
#        auca/competitive_programming_I/math_ad_hoc/longest_divisors_interval.cpp
#        auca/algorithm_languages_I/events_and_scanline/the_union_of_k_segments.cpp
#        auca/data_structures/dynamic_array/dynamic_array.cpp
#        auca/data_structures/dynamic_array/filtering.cpp
#        auca/data_structures/dynamic_array/friendly_filtering.cpp
#        auca/data_structures/dynamic_array/devu_and_partitioning_of_the_array.cpp
#        auca/data_structures/stack/minimum_in_stack.cpp
#        auca/algorithm_languages_I/events_and_scanline/the_union_of_k_segments.cpp
#        auca/algorithm_languages_I/events_and_scanline/little_girl_and_maximum_sum.cpp
#        auca/competitive_programming_I/implementation/jabber_id.cpp
#        auca/competitive_programming_I/implementation/interactive_bulls_and_cows_easy.cpp
#        auca/competitive_programming_I/implementation/treasure_island.cpp
#        auca/competitive_programming_I/math_ad_hoc/longest_divisors_interval.cpp
#        auca/competitive_programming_I/math_ad_hoc/forbidden_integer.cpp
#        auca/competitive_programming_I/math_ad_hoc/sea_battle.cpp
        #        auca/algorithm_languages_I/events_and_scanline/little_girl_and_maximum_sum.cpp
        #        auca/competitive_programming_I/experienced/cd_pwd_commands.cpp
        #        codeforces/practice_training_600_problems/week_1_difficulty_1000/string_lcm.cpp
        #        auca/competitive_programming_I/math_ad_hoc/forbidden_integer.cpp
        #                auca/competitive_programming_I/beginner/registration_system.cpp
#        auca/competitive_programming_I/beginner/way_too_long_words.cpp
#        auca/competitive_programming_I/complexity/polycarp_and_coins.cpp
)
